@Library('jenkins-pipeline-shared-libraries')_

pipeline{
    agent{
        label 'kie-rhel7 && kie-mem8g && !built-in'
    }
    tools {
      maven 'kie-maven-3.8.7'
      jdk 'kie-jdk11'
      nodejs 'nodejs-16.2.0'
    }
    parameters {
      string(description: 'The deployment URL', name: 'NEXUS_DEPLOYMENT_REPO_URL')
      string(description: 'The product version, if not provided the optaplanner main branch one will be used', name: 'PRODUCT_VERSION')
      string(description: 'The drools product version, if not provided the drools main branch one will be used', name: 'DROOLS_PRODUCT_VERSION')
      string(description: 'The config repository branch', name: 'CONFIG_BRANCH', defaultValue: 'master')
      string(description: 'The build chain definition file owner', name: 'DEFINITION_FILE_OWNER', defaultValue: 'kiegroup')
      string(description: 'The build chain definition file branch', name: 'DEFINITION_FILE_BRANCH', defaultValue: 'main')
    }
    options {
      buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }
    environment {
      DATE_TIME_SUFFIX_FORMAT = 'yyyyMMddHH'
    }
    stages{
      stage('Initialize') {
        steps {
          script {
            // Fetch versions from pom if not provided
            env.PRODUCT_VERSION = "${PRODUCT_VERSION ?: parseVersionFromPom('kiegroup/drools-ansible-rulebook-integration')}"
            env.DROOLS_PRODUCT_VERSION = "${DROOLS_PRODUCT_VERSION ?: parseVersionFromPom('kiegroup/drools')}"
          }

          sh 'printenv'
        }
      }
      stage('Install build-chain tool') {
        steps {
          script {
            println "[INFO] Installing build-chain tool"
            sh "npm install -g @kie/build-chain-action${env.NPM_REGISTRY_URL ? " -registry=${NPM_REGISTRY_URL}" : ''}"

            sh "npm list -g | grep build-chain"
          }
        }
      }
      stage('Clone build configuration repo') {
        steps {
          script {
            def currentBranch = getBuildConfigBranch()
            println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
            sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"

            // export PME parameters and build scripts from nightly build config
            def buildConfigAdditionalVariables = [
              'droolsProductVersion': env.DROOLS_PRODUCT_VERSION,
              'droolsIntegrationVersion': env.PRODUCT_VERSION
            ]
            pmebuild.parseBuildConfig("$WORKSPACE/build_config/drools-ansible-integration/nightly", buildConfigAdditionalVariables)
          }
        }
      }
      stage('Build nightly projects') {
        steps {
          script {
            withCredentials([string(credentialsId: "kie-ci1-token", variable: 'GITHUB_TOKEN')]) {
              def SETTINGS_XML_ID = '5d9884a1-178a-4d67-a3ac-9735d2df2cef'
              def buildBranch = getBuildBranch()
              def definitionFile = "https://raw.githubusercontent.com/${env.DEFINITION_FILE_OWNER}/drools-ansible-rulebook-integration/${env.DEFINITION_FILE_BRANCH}/.ci/nightly-build-config.yaml"
              configFileProvider([configFile(fileId: "${SETTINGS_XML_ID}", variable: 'PME_MAVEN_SETTINGS_XML')]) {
                sh "build-chain build branch --token=${GITHUB_TOKEN} -f ${definitionFile} -b ${buildBranch} -o bc -p kiegroup/drools-ansible-rulebook-integration --skipParallelCheckout"
              }
            }
          }
        }
      }
      stage('Upload artifacts to repository') {
        steps {
          script {
            echo "[INFO] Start uploading ${env.WORKSPACE}/deployDirectory"
            dir("${env.WORKSPACE}/deployDirectory") {
              withCredentials([usernameColonPassword(credentialsId: "${env.NIGHTLY_DEPLOYMENT_CREDENTIAL}", variable: 'deploymentCredentials')]) {
                sh "zip -qr kiegroup ."
                sh "curl --fail --upload-file kiegroup.zip -u $deploymentCredentials -v ${NEXUS_DEPLOYMENT_REPO_URL}"
              }
            }
          }
        }
      }
    }
    post{
      always{
        archiveArtifacts artifacts: '**/*.maven.log', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true

        echo 'Generating JUnit report...'
        junit allowEmptyResults: true, healthScaleFactor: 1.0, testResults: '**/target/*-reports/TEST-*.xml'
      }
      cleanup {
        cleanWs()
      }
    }
}

String getBuildConfigBranch() {
  return env.CONFIG_BRANCH ?: env.DEFAULT_CONFIG_BRANCH ?: env.BRANCH_NAME ?: env.GIT_BRANCH
}

String getBuildBranch() {
  // Fallback to main if none exist
  return env.BRANCH_NAME ?: env.GIT_BRANCH ?: 'main'
}

// Parse version from main branch of the given project
//      * project: in the form of owner/repository
def parseVersionFromPom(String project) {
    def currentBranch = getBuildBranch() ?: env.GIT_BRANCH
    def pomFilename = "${project.replaceAll("/", "_")}_pom.xml"
    def pomPath = "${env.WORKSPACE}/${pomFilename}"

    sh "curl https://raw.githubusercontent.com/${project}/${currentBranch}/pom.xml -o ${pomPath}"
    def pom = readMavenPom file: pomPath
    return pom.getVersion().replaceAll('-SNAPSHOT', '')
}